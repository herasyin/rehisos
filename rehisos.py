# —Åopyleft: ‚å® 2022 >>-her--> all rights not reserved

from discord.ext import commands
import discord

from datetime import datetime
import time
import random
import requests
import sys, os, json
import psycopg2
from vault import *

DATABASE_URL = os.environ['DATABASE_URL']
TOKEN = os.environ['DISCORD_TOKEN']

intents = discord.Intents.all()
intents.members = True

client = commands.Bot(command_prefix='!', intents=intents)
client.remove_command('help')


print(sys.version)

@client.event
async def on_ready():
	try:
		with psycopg2.connect(DATABASE_URL, sslmode='require') as database:
			cursor = database.cursor()
			for guild in client.guilds:
				for member in guild.members:
					cursor.execute('SELECT register FROM members WHERE discord_id = {};'.format(member.id))
					if cursor.fetchone() is None:
						try:
							cursor.execute("INSERT INTO members (name, discord_id, mention, score) VALUES ('{}', {}, '{}', 0);".format(member.name, member.id, member))
							await logit('MEMBER', client, member=member)
						except psycopg2.errors.UniqueViolation as e:
							await logit('ERROR_', client, member=member, e=e)
	except Exception as e:
		await logit('ERROR_', client, e=e)
	print('ready 2 say hui!!111')


 #‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë   ‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñí‚ñí      ‚ñí‚ñí   ‚ñí‚ñí ‚ñí‚ñí   ‚ñí‚ñí    ‚ñí‚ñí
#‚ñí‚ñí      ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí    ‚ñí‚ñí
#‚ñì‚ñì      ‚ñì‚ñì   ‚ñì‚ñì ‚ñì‚ñì   ‚ñì‚ñì    ‚ñì‚ñì
 #‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà


@client.event
async def on_member_join(member):
	channel = client.get_channel(CHAT_ID) if member.guild.id == HERA_ID else member.guild.system_channel
	await channel.send(f'{member.mention} {random.choice(HI)}')

	# DATABASE // WELLCOME TO BIG BROTHER NOTE üñâ
	try:
		with psycopg2.connect(DATABASE_URL, sslmode='require') as database:
			cursor = database.cursor()
			cursor.execute('SELECT register FROM members WHERE discord_id = {};'.format(member.id))
			if cursor.fetchone() is None:
				cursor.execute("INSERT INTO members (name, discord_id, mention, score) VALUES ('{}', {}, '{}', 0);".format(member.name, member.id, member))
				await logit('MEMBER', client, member=member)
			else:
				await logit('MEMBER', client, member=member, cursor=cursor)
	except Exceprion as e:
		await logit('ERROR_', client, member=member, e=e)


@client.event
async def on_member_remove(member):
	channel = member.guild.system_channel
	await channel.send(f'{member} {random.choice(BYE)}')


@client.event
async def on_message(message):
	await client.process_commands(message)
	message_ = message.content.lower()
	bad_word = [u'–ø–∏–¥–æ—Ä', u'–ø–µ–¥–∏–∫', u'–ø–µ–¥—Ä–∏–ª–ª–∞', 'pidor', u'–ø–∏–¥–æ—Ä–∞—Å', u'–ø–∏–¥–∞—Ä–∞—Å']
	for i in message_.split():
		if i in bad_word:
			await message.channel.send(u'–æ—Å—É–∂–¥–∞—é –ø–∏–¥–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —ç—Ç–æ —Å–ø–∏–∑–¥–∞–Ω—É–ª!')
			break
	black_word = ['nigger', u'–Ω–∏–≥–µ—Ä', u'–Ω–∏–≥–∞', u'–Ω–∏–≥–≥–µ—Ä', u'–Ω–µ–≥—Ä', 'nigga', 'niga', 'niger']
	for i in message_.split():
		if i in black_word:
			await message.channel.send(random.choice(RACISTS_JOCKES))
			break
	dont_call_rehisos = ['rehisos', u'—Ä–µ—Ö–∏—Å–æ—Å', 'rehisos,', u'—Ä–µ—Ö–∏—Å–æ—Å,']
	for i in message_.split():
		if i in dont_call_rehisos and message.author.name != 'rehisos':
			fuck_off = [
				u'–Ω–µ –ø–æ–º–∏–Ω–∞–π –∏–º—è –±–æ–≥–∞ –≤ —Å—É–µ, –¥–æ–ª–±–æ–µ–±.',
				u'—á–µ?',
				f'–æ—Ç–µ–±–∏—Å—å, —è —Å–ø–ª—é {ICON[4]}',
				f'–¥–∞ - —ç—Ç–æ —è {ICON[2]}'
			]
			await message.channel.send(random.choice(fuck_off))
			break
	lust = [u'–Ω—é–¥—Å—ã']
	for i in message_.split():
		if i in lust and random.choice(range(100)) > 66:
			await paint(message.channel, 'nude', time)
			break
	warrior = [u'–≤–æ–∏–Ω']
	for i in message_.split():
		if i in warrior and random.choice(range(100)) > 66:
			await paint(message.channel, 'warr', time)
			break
	masquarade = [u'masquarade']
	if message_ in masquarade:
		await message.channel.send('–†–µ–∫–ª–∞–º–Ω—ã–π –ø–ª–∞–∫–∞—Ç —Ç–µ–ª–µ—à–æ—É **Implant Outsource**')
		time.sleep(1)
		await message.channel.send(f'{FILES_URL[0]}928076725118726164{FILES_URL[1]}22.01.04_-_23.56.01.26.png')
		time.sleep(1)
		await message.channel.send('—Å–∏—Å—å–∫–∏ –∏–∑ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏, –∂–æ–ø–∞ –∏–∑ –°–æ–º–∞–ª–∏, –∑–Ω—É—á–∏—Ç –Ω–µ —Ç–∞–∫ –ø–ª–æ—Ö–æ')
	manglish = [u'–∞–Ω–≥–ª–∏—á–∞–Ω–∏–Ω']
	for i in message_.split():
		if i in manglish and random.choice(range(100)) > 33:
			await message.channel.send(f'{message.author.name}, hui\n‚êå')
			type_message = message.channel.last_message
			for line in TYPEMESS:				
				time.sleep(1.1) if '‚êÄ' in line else time.sleep(0)
				await type_message.edit(content=f'{message.author.name}, {line}')
			await type_message.delete(delay=1.0)
			break

	# DATABASE // EVERY COIN HELPS ‚õÉ‚õÇ
	try:
		with psycopg2.connect(DATABASE_URL, sslmode='require') as database:
			cursor = database.cursor()
			cursor.execute('UPDATE members SET score = score + 1 WHERE discord_id = {};'.format(message.author.id))
	except Exception as e:
		await logit('ERROR_', client, author=message.author.name, e=e)



 #‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë    ‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë    ‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë    ‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñí‚ñí      ‚ñí‚ñí    ‚ñí‚ñí ‚ñí‚ñí‚ñí‚ñí  ‚ñí‚ñí‚ñí‚ñí ‚ñí‚ñí‚ñí‚ñí  ‚ñí‚ñí‚ñí‚ñí ‚ñí‚ñí   ‚ñí‚ñí ‚ñí‚ñí‚ñí‚ñí   ‚ñí‚ñí ‚ñí‚ñí   ‚ñí‚ñí ‚ñí‚ñí
#‚ñí‚ñí      ‚ñí‚ñí    ‚ñí‚ñí ‚ñí‚ñí ‚ñí‚ñí‚ñí‚ñí ‚ñí‚ñí ‚ñí‚ñí ‚ñí‚ñí‚ñí‚ñí ‚ñí‚ñí ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí ‚ñí‚ñí ‚ñí‚ñí  ‚ñí‚ñí ‚ñí‚ñí   ‚ñí‚ñí ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí
#‚ñì‚ñì      ‚ñì‚ñì    ‚ñì‚ñì ‚ñì‚ñì  ‚ñì‚ñì  ‚ñì‚ñì ‚ñì‚ñì  ‚ñì‚ñì  ‚ñì‚ñì ‚ñì‚ñì   ‚ñì‚ñì ‚ñì‚ñì  ‚ñì‚ñì ‚ñì‚ñì ‚ñì‚ñì   ‚ñì‚ñì      ‚ñì‚ñì
 #‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà


@client.command()
async def help(ctx):
	await ctx.channel.purge(limit=1)
	author = ctx.message.author
	wannaplay = [f'{author.mention}, –Ω–∏–∫—Ç–æ —Ç–µ–±–µ –Ω–µ –ø–æ–º–æ–∂–µ—Ç!', HELPMESSAGE]
	await ctx.send(random.choice(wannaplay))


@client.command()
@commands.has_permissions(administrator=True)
async def clear(ctx, amount: int):
	await ctx.channel.purge(limit=amount + 1)


@client.command()
@commands.has_permissions(administrator=True)
async def roadmap(ctx):
	await ctx.channel.purge(limit=1)
	with open(os.path.join('texted', 'roadmap.txt'), encoding='utf-8') as road_map:
		roadmap_message = "".join(road_map.readlines())
		await ctx.channel.send(f'```{roadmap_message}```')


@client.command(aliases = ['plot', 'chart'])
async def grafic(ctx, *value):
	await ctx.channel.purge(limit=1)
	if value:
		pre_data = ' '.join((f'`{LABEL["rome"][i]} {x}`' for i, x in enumerate(value[:12])))
		await ctx.channel.send(f'{pre_data}\n{describe(value)}')
	else:
		await ctx.channel.send(f'{ICON[3]} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –Ω–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞')


@client.command()
async def today(ctx):
	await ctx.channel.purge(limit=1)
	TODAY_TEMPLE = '‚∏ô    üôº  **{}**\n   üôº  **{}**\nüôº  **{}**'
	date = datetime.today()
	numday = date.weekday()
	fulldate = date.strftime('%d %B %Y')
	days = {
		0: ['MOONDAY', 'TIME: TO PARTY'],
		1: ['TRUESDAY', 'TIME: –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢'],
		2: ['WHENSDAY', 'TIME: HUETIME'],
		3: ['THENSDAY', 'TIME: LATE'],
		4: ['FREEDAY', 'TIME: NOT ENOUGH'],
		5: ['SATANDAY', 'TIME: GIVE A FUCK'],
		6: ['SADSDAY', 'TIME: TO DIE', 'TIME: TO CRY']
	}
	await ctx.channel.send(TODAY_TEMPLE.format(days[numday][0], fulldate.upper(), days[numday][1]))
	if numday == 6:
		message = ctx.channel.last_message
		await message.edit(content=TODAY_TEMPLE.format(days[numday][0], fulldate.upper(), days[numday][2]))


@client.command()
async def weather(ctx, *city):
	await ctx.channel.purge(limit=1)
	try:
		city = [word for word in city]
		check = [symb for symb in ''.join(city) if u'\u0400' <= symb <= u'\u04FF' or u'\u0500' <= symb <= u'\u052F']
		russian = True if len(check) != 0 else False
		for i in range(len(city)):
			if '-' in city[i]:
				word = city[i].split('-')
				words = []
				for w in word:
					if w.lower() != '–Ω–∞':
						words.append(w.capitalize())
					else:
						words.append(w.lower())
				city[i] = '-'.join(words) if russian else ' '.join(words)
			else:
				city[i] = city[i].capitalize() if city[i].lower() != '–Ω–∞' else city[i]
		city = '-'.join(city) if russian else ' '.join(city)
		url = f'http://wttr.in/{city}'
		params = {'format': '4', 'M': '', 'm': '', 'lang': 'ru'}
		response = requests.get(url, params=params)
		if response.status_code == 200:
			report = response.text.replace(': ', ':  ').replace(' üå°Ô∏è', '`üå°Ô∏è').replace('m/s', 'm/s`')
			await ctx.channel.send(report)
		elif response.status_code == 404:
			await ctx.channel.send(f'ü°∂ **ERR‚õ∂R {response.status_code}  {ICON[0]}**Ôπñ \
				                    ‚îä{ctx.author.name}, —á—Ç–æ —ç—Ç–æ, –±–ª—è—Ç—å, –∑–∞ –≥–æ—Ä–æ–¥? {city}')
			message = ctx.channel.last_message
			time.sleep(2)
			await message.edit(content=f'ü°∂ **ERR‚õ∂R {response.status_code}  {ICON[0]}**Ôπñ \
				                        ‚îä{ctx.author.name}, —á—Ç–æ —ç—Ç–æ, –±–ª—è—Ç—å, –∑–∞ –≥–æ—Ä–æ–¥? ~~{city}~~')
		else:
			await ctx.channel.send(f'{ctx.author.name}, —Å–æ—Ä—è–Ω, –Ω–æ —Ç—É—Ç –æ—à–∏–±–∫–∞ **{response.status_code}**\n ')
	except requests.ConnectionError:
		await ctx.channel.send('<—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞>')
	except Exception as e:
		await logit('ERROR_', client, e=e)


@client.command()
async def moonday(ctx, asi=False):
	await ctx.channel.purge(limit=1)
	date = datetime.today()
	year = date.year
	month = date.month
	day = date.day
	hour = date.hour
	minute = date.minute
	second = date.second
	magicdate = 2448065.4133449076  # 22.06.1990 21:55 - newmoon
	moonmonth = 29.530588853

	year_ = year + 4800 - (14 - month) // 12
	month_ = month + 12 * ((14 - month) // 12) - 3
	JDN = day + (153 * month_ + 2) // 5 + 365 * year_ + year_ // 4 - year_ // 100 + year_ // 400 - 32045
	JD = JDN + (hour - 12) / 24 + minute / 1440 + second / 86400
	moon_day = (JD - magicdate) % moonmonth
	phase = {
		            moon_day <  1.84566: "–ù–æ–≤–æ–ª—É–Ω–∏–µ `üåë`",            #          ‚ñÑ‚ñÑ‚ñÑ
		 1.84566 <= moon_day <  5.53699: "–ú–æ–ª–æ–¥–∞—è –ª—É–Ω–∞ `üåí`",         #      ‚ñÑ‚ñÑ‚ñì‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ
		 5.53699 <= moon_day <  9.22831: "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å `üåì`",      #    ‚ñÑ‚ñà‚ñí‚ñë‚ñí‚ñí‚ñí‚ñà‚ñà‚ñà‚ñì‚ñí‚ñì‚ñà‚ñå
		 9.22831 <= moon_day < 12.91963: "–ü—Ä–∏–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞ `üåî`",     #   ‚ñê‚ñà‚ñí‚ñë‚ñë‚ñë‚ñí‚ñí‚ñí‚ñà‚ñì‚ñì‚ñí‚ñí‚ñì‚ñà‚ñå
		12.91963 <= moon_day < 16.61096: "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ `üåï`",           #   ‚ñà‚ñì‚ñí‚ñí‚ñë‚ñí‚ñì‚ñí‚ñì‚ñà‚ñà‚ñì‚ñí‚ñì‚ñà‚ñà‚ñà
		16.61096 <= moon_day < 20.30228: "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞ `üåñ`",       #   ‚ñê‚ñà‚ñà‚ñí‚ñì‚ñí‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñì‚ñà‚ñà‚ñà‚ñå
		20.30228 <= moon_day < 23.99361: "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å `üåó`",   #    ‚ñÄ‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå
		23.99361 <= moon_day < 27.68493: "–°—Ç–∞—Ä–∞—è –ª—É–Ω–∞ `üåò`",          #      ‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ
		            moon_day > 27.68493: "–ù–æ–≤–æ–ª—É–Ω–∏–µ `üåë`"             #          ‚ñÄ‚ñÄ‚ñÄ
	}

	ekadasi = ''
	if 11.1 < moon_day < 11.9 or 26.1 < moon_day < 26.9:
		ekadasi = 'ƒíkƒÅda≈õi time!'
	else:
		dop = JDN + 32044
		dop_ = {
		     moon_day < 11: int(11 - moon_day),
		12 < moon_day < 26: int(26 - moon_day),
		     moon_day > 27: int(29.530588853 - moon_day + 11)
		}
		dop1 = dop + dop_[True]
		dop2 = 4 * (dop1 + 3) // 146097
		dop3 = dop1 - 146097 * dop2 // 4
		dop4 = (4 * dop3 + 3) // 1461
		dop5 = dop3 - 1461 * dop4 // 4
		dop6 = (5 * dop5 + 2) // 153
		e_day = dop5 - (153 * dop6 + 2) // 5 + 1
		e_month = dop6 + 3 - 12 * (dop6 // 10)
		e_year = 100 * dop2 + dop4 - 4800 + dop6 // 10
		ekadasi = 'ƒíkƒÅda≈õi: `{:02}.{:02}.{:02}`'.format(e_day, e_month, e_year)

	await ctx.channel.send(f'**DAY {round(moon_day, 1)}** ‚Ä¢ {phase[True]}')
	await ctx.channel.send(ekadasi) if asi else time.sleep(0)

@client.command()
async def whoami(ctx):
	await ctx.channel.purge(limit=1)
	thatsyou = [
		'–≤—ã—Å–æ–∫–æ–º–µ—Ä–Ω–æ–µ —É–µ–±–∏—â–µ, –∫–æ—Ç–æ—Ä—ã–π –¥—Ä–æ—á–∏—Ç –Ω–∞ —Å–≤–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–µ—Ä–∫–∞–ª–µ.',
		'–±–µ–∑–≤–æ–ª—å–Ω–∞—è –º–∞—Ä–∏–æ–Ω–µ—Ç–∫–∞, –∫—Ç–æ –∫–∞–∫ —Ö–æ—á–µ—Ç - —Ç–∞–∫ —Ç–æ–±–æ–π –∏ –¥—Ä–æ—á–∏—Ç.',
		'—Å –µ–±–∞–Ω–∏–Ω–æ–π, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ, –≥–ª–∞–≤–Ω–æ–µ –Ω–µ –≤–æ–ª–Ω—É–π—Å—è, —è —â–∞—Å –ø–æ–∑–≤–æ–Ω—é –∫—É–¥–∞ –Ω–∞–¥–æ –∏ —Ç–µ–±–µ –ø–æ–º–æ–≥—É—Ç...',
		'—Ç—ã –ø—Ä–æ—Å—Ç–æ —á—É–¥–æ, –º–∏–ª–∞—à–∫–∞ –∏ –∫—Ä–∞—Å–∞–≤—á–∏–∫!'
	]
	whoyouare = random.choice(thatsyou)
	await ctx.channel.send('–¥–∞–π –ø–æ–¥—É–º–∞—Ç—å...')
	await ctx.channel.send('<a:loading:933335927659561070>')
	time.sleep(3)
	await ctx.channel.purge(limit=2)
	await ctx.channel.send(f'{ctx.author.name} {whoyouare}')
	if thatsyou.index(whoyouare) == 0:
		await ctx.channel.send(f'{FILES_URL[0]}928076723990458428{FILES_URL[1]}22.01.04_-_23.44.26.40.png')
	if thatsyou.index(whoyouare) == 1:
		await ctx.channel.send(f'{FILES_URL[0]}928728107106598932{FILES_URL[1]}22.01.06_-_02.17.15.49.png')
	if thatsyou.index(whoyouare) == 2:
		await ctx.channel.purge(limit=1)
		await ctx.channel.send(f'{ctx.author.name} —É–±–µ–π –∏—Ö! –ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π —ç—Ç–æ!')
		await ctx.channel.purge(limit=1)
		await ctx.channel.send(f'{ctx.author.name} —ÉÃ∏ÕäÃêÕêÕéÃ∫Õï–±Ã¥ÕÉÃöÃ´Ã†Õú–µÃ¥ÕòÕÅÕäÕôÃùÃ¶–πÃµÃΩÕåÃìÃªÃ° –∏Ã¥ÕëÃæÕäÕöÕô—ÖÃ¥ÕÑÕêÕõÕéÕéÃ¶!Ã∏ÃΩÃêÕùÃ¶ÕñÕç –üÃµÃîÃøÃíÃùÕöÃ¢—ÄÃ¥ÃöÃøÕùÕìÃ∫Ã¶–æÃµÕõÃîÕ†ÕôÕîÕú—ÅÃµÕ†ÃíÃæÃ¢ÕáÃ¢—ÇÃ¥ÃæÃæÃîÕîÃªÕô–æÃµÃΩÕÑÕäÃªÃô —ÅÃ∏ÃöÕêÕåÃ¶Ã™Õâ–¥Ã∏ÕäÕÑÕíÃùÃò–µÃ∏Õ†ÕãÕùÃ°ÕúÕú–ªÃ∏ÕëÕùÕùÃüÕçÃ¶–∞Ã¥ÕêÃæÃïÃûÃ¢Ã¶–πÃ¥ÃæÕÉÕùÕîÃòÃò —çÃµÕÉÕ†ÕùÕîÃ¢Ãù—ÇÃ¥ÕÅÕãÃªÃ¶Ãù–æÃ∏ÕêÕÑÃºÃüÃù!ÃµÃïÃêÕåÃ°Õî')
		await ctx.channel.purge(limit=1)
		await ctx.channel.send(f'{ctx.author.name} {whoyouare}')
		await ctx.channel.send(f'{FILES_URL[0]}928076725433286666{FILES_URL[1]}22.01.05_-_00.31.31.25.png')
	if thatsyou.index(whoyouare) == 3:
		await ctx.channel.purge(limit=1)
		whoyouare = random.choice(thatsyou)
		await ctx.channel.send('<a:loading:933335927659561070>')
		time.sleep(3)
		await ctx.channel.purge(limit=1)
		await ctx.channel.send(f'{ctx.author.name} {whoyouare}')
		time.sleep(1)
		if thatsyou.index(whoyouare) == 0:
			await ctx.channel.send(f'{FILES_URL[0]}928076723990458428{FILES_URL[1]}22.01.04_-_23.44.26.40.png')
		if thatsyou.index(whoyouare) == 1:
			await ctx.channel.send(f'{FILES_URL[0]}928728107106598932{FILES_URL[1]}22.01.06_-_02.17.15.49.png')
		if thatsyou.index(whoyouare) == 2:
			await ctx.channel.purge(limit=1)
			await ctx.channel.send(f'{ctx.author.name} —É–±–µ–π –∏—Ö! –ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π —ç—Ç–æ!')
			await ctx.channel.purge(limit=1)
			await ctx.channel.send(f'{ctx.author.name} ‚õ§—ÉÃ∏ÕäÃêÕêÕéÃ∫Õï–±Ã¥ÕÉÃöÃ´Ã†Õú–µÃ¥ÕòÕÅÕäÕôÃùÃ¶–πÃµÃΩÕåÃìÃªÃ° –∏Ã¥ÕëÃæÕäÕöÕô—ÖÃ¥ÕÑÕêÕõÕéÕéÃ¶!Ã∏ÃΩÃêÕùÃ¶ÕñÕç –üÃµÃîÃøÃíÃùÕöÃ¢—ÄÃ¥ÃöÃøÕùÕìÃ∫Ã¶–æÃµÕõÃîÕ†ÕôÕîÕú—ÅÃµÕ†ÃíÃæÃ¢ÕáÃ¢—ÇÃ¥ÃæÃæÃîÕîÃªÕô–æÃµÃΩÕÑÕäÃªÃô —ÅÃ∏ÃöÕêÕåÃ¶Ã™Õâ–¥Ã∏ÕäÕÑÕíÃùÃò–µÃ∏Õ†ÕãÕùÃ°ÕúÕú–ªÃ∏ÕëÕùÕùÃüÕçÃ¶–∞Ã¥ÕêÃæÃïÃûÃ¢Ã¶–πÃ¥ÃæÕÉÕùÕîÃòÃò —çÃµÕÉÕ†ÕùÕîÃ¢Ãù—ÇÃ¥ÕÅÕãÃªÃ¶Ãù–æÃ∏ÕêÕÑÃºÃüÃù!ÃµÃïÃêÕåÃ°Õî‚õ§')
			await ctx.channel.purge(limit=1)
			await ctx.channel.send(f'{ctx.author.name} {whoyouare}')
			await ctx.channel.send(f'{FILES_URL[0]}928076725433286666{FILES_URL[1]}22.01.05_-_00.31.31.25.png')
		if thatsyou.index(whoyouare) == 3:
			await ctx.channel.purge(limit=1)
			whoyouare = random.choice(thatsyou)
			await ctx.channel.send('<a:loading:933335927659561070>')
			time.sleep(3)
			await ctx.channel.purge(limit=1)
			await ctx.channel.send(f'{ctx.author.name} {whoyouare}')
			time.sleep(1)
			if thatsyou.index(whoyouare) == 0:
				await ctx.channel.send(f'{FILES_URL[0]}928076723990458428{FILES_URL[1]}22.01.04_-_23.44.26.40.png')
			if thatsyou.index(whoyouare) == 1:
				await ctx.channel.send(f'{FILES_URL[0]}928728107106598932{FILES_URL[1]}22.01.06_-_02.17.15.49.png')
			if thatsyou.index(whoyouare) == 2:
				await ctx.channel.purge(limit=1)
				await ctx.channel.send(f'{ctx.author.name} —É–±–µ–π –∏—Ö! –ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π —ç—Ç–æ!')
				await ctx.channel.purge(limit=1)
				await ctx.channel.send(f'{ctx.author.name} ‚õ§—ÉÃ∏ÕäÃêÕêÕéÃ∫Õï–±Ã¥ÕÉÃöÃ´Ã†Õú–µÃ¥ÕòÕÅÕäÕôÃùÃ¶–πÃµÃΩÕåÃìÃªÃ° –∏Ã¥ÕëÃæÕäÕöÕô—ÖÃ¥ÕÑÕêÕõÕéÕéÃ¶!Ã∏ÃΩÃêÕùÃ¶ÕñÕç –üÃµÃîÃøÃíÃùÕöÃ¢—ÄÃ¥ÃöÃøÕùÕìÃ∫Ã¶–æÃµÕõÃîÕ†ÕôÕîÕú—ÅÃµÕ†ÃíÃæÃ¢ÕáÃ¢—ÇÃ¥ÃæÃæÃîÕîÃªÕô–æÃµÃΩÕÑÕäÃªÃô —ÅÃ∏ÃöÕêÕåÃ¶Ã™Õâ–¥Ã∏ÕäÕÑÕíÃùÃò–µÃ∏Õ†ÕãÕùÃ°ÕúÕú–ªÃ∏ÕëÕùÕùÃüÕçÃ¶–∞Ã¥ÕêÃæÃïÃûÃ¢Ã¶–πÃ¥ÃæÕÉÕùÕîÃòÃò —çÃµÕÉÕ†ÕùÕîÃ¢Ãù—ÇÃ¥ÕÅÕãÃªÃ¶Ãù–æÃ∏ÕêÕÑÃºÃüÃù!ÃµÃïÃêÕåÃ°Õî‚õ§')
				await ctx.channel.purge(limit=1)
				await ctx.channel.send(f'{ctx.author.name} kill<a:redflame:786878538640130048>kill<a:yees:801342763790499840>kill<a:redflame:786878538640130048>kill')
				await ctx.channel.purge(limit=1)
				await ctx.channel.send(f'{ctx.author.name} {whoyouare}')
				await ctx.channel.send(f'{FILES_URL[0]}928076725433286666{FILES_URL[1]}22.01.05_-_00.31.31.25.png')
			if thatsyou.index(whoyouare) == 3:
				await ctx.channel.purge(limit=1)
				await ctx.channel.send('–¥–∞ –µ–±–∞–Ω–Ω—ã–π –≤ —Ä–æ—Ç')
				await ctx.channel.send('–ª–∞–¥–Ω–æ')
				await ctx.channel.send(f'{ctx.author.name} {whoyouare}')
				await ctx.channel.send(f'{FILES_URL}933299625543237652/unknown.png')


@client.command()
async def bones(ctx):
	await ctx.channel.purge(limit=1)
	author = ctx.message.author
	devilsbones = [
		'<:one:930072005489868810>',
		'<:two:930072005309505617>',
		'<:three:930072005498253312>',
		'<:four:930072005124947969>',
		'<:five:930072005401800735>',
		'<:six:930072005540212756>'
	]
	throw = [random.choice(range(6)) for x in range(2)]
	hahaha = [
		u'–µ–±–∞—Ç—å —Ç—ã –ª–æ—Ö', u'–¥–≤–µ –¥—ã—Ä–∫–∏, –∫–∞–∫ —É —Ç–≤–æ–µ–π...',
		u'—Ö—É—è –≤–µ–∑—É–Ω—á–∏–∫, –º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ —Ü–µ—Ä–∫–æ–≤—å —Å—Ö–æ–¥–∏—Ç—å?',
		u'–Ω—É –Ω–∏—á–µ–≥–æ, –º–æ–∂–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç (–Ω–µ—Ç)',
		u'–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö', u'–ª—É—á—à–µ –Ω–µ —Ö–æ–¥–∏ –≤ –∫–∞–∑–∏–Ω–æ',
		u'–≤—Å–µ —Ö–≤–∞—Ç–∏—Ç, –∫—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –±—Ä–æ—Å–∞–µ—Ç?'
	]
	reverence = [u'–≤–µ–∑—É—á–∏–π –ø–∏–∑–¥—é–∫', u'–®–ï–°–¢–Å–†–û–ß–ö–ò!!!', u'—Å —Ç–æ–±–æ–π –Ω–∞ –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–∞—Ç—å –Ω–µ –±—É–¥—É']
	await ctx.channel.send(f'{devilsbones[trow[0]]} {devilsbones[trow[1]]}')
	if not sum(throw):
		await ctx.channel.send(f'{author.mention}, {random.choice(hahaha)}')
	if sum(throw) == 10:
		await ctx.channel.send(f'{author.mention}, {random.choice(reverence)}')

@client.command()
async def fibsearchmerleabrahams(ctx):
	await ctx.channel.purge(limit=1)
	emb = discord.Embed(colour=discord.Colour.from_rgb(233, 0, 38))
	emb.set_author(name='[FIB | FPB | ‚Ññ1419 | Jack Heras]', icon_url=ctx.author.avatar_url)
	emb.set_thumbnail(url='https://media.discordapp.net/attachments/871746192743211018/888067721466626058/NHAcV09.png')
	emb.add_field(name='MERLE ABRAHAMS', value='file#00083041', inline=False)
	emb.add_field(name='GENDER', value='male', inline=True)
	emb.add_field(name='HIGHT', value='5‚Ä≤ 8‚Ä≥', inline=True)
	emb.add_field(name='WEIGHT', value='148 lb', inline=True)
	emb.add_field(name=u'–†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï', value=u'–î–µ–ª–æ ¬´–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —É–±–∏–π—Å—Ç–≤¬ª —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –±—ã–ª–æ —Å—Ä–∞–Ω—ã–º —Ç—É–ø–∏–∫–æ–º. –ò–∑ —Ä–∞—Å—Å–∫–∞–∑–æ–≤ –º–µ—Å—Ç–Ω—ã—Ö, –º—ã –∑–Ω–∞–ª–∏ –∫—Ç–æ —É–±–∏–π—Ü–∞, –Ω–æ –∫—Ä–æ–º–µ –∫–æ—Å–≤–µ–Ω–Ω—ã—Ö —É–ª–∏–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ. 48 —á–∞—Å–æ–≤–æ–π –¥–æ–ø—Ä–æ—Å –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–∞–ª –∏ –º—ã –±—ã–ª–∏ –≤—ã–Ω—É–∂–¥–µ–Ω—ã –µ–≥–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å. –í–æ –≤—Ä–µ–º—è —Å–ª–µ–∂–∫–∏ –æ–Ω –ø–æ–¥–æ—à—ë–ª –∫ –Ω–∞—à–µ–π –º–∞—à–∏–Ω–µ –∏ –Ω–∞–∑–≤–∞–ª –º–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –¢–æ–º–∞—Å–∞ ¬´–∂–∏—Ä–Ω–æ–π –ø–∏–∑–¥–æ–π¬ª, –ø–æ—ç—Ç–æ–º—É –∞–≥–µ–Ω—Ç –¢–æ–º–∞—Å –Ω–∞—à–µ–ª —É –Ω–µ–≥–æ –≤ –∑–∞–¥–Ω–µ–º –∫–∞—Ä–º–∞–Ω–µ 100 –≥—Ä–∞–º–º –æ—Ç–±–æ—Ä–Ω–æ–≥–æ –∫–æ–∫—Å–∞ –∏ –∑–∞—Å–∞–¥–∏–ª–∏ —É–µ–±–∫–∞ –≤ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—É—é —Ç—é—Ä—å–º—É. –¢–µ–ª–∞ –∂–µ—Ä—Ç–≤ —Ç–∞–∫ –∏ –Ω–µ–±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.', inline=False)
	emb.add_field(name=u'–ê–†–ï–°–¢', value=u'–í–æ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∞–Ω–∏—è —Ç—Ä–∏–∂–¥—ã –∏—Å–ø—Ä–∞–∂–Ω–∏–ª—Å—è –≤ –ø–∞—Ç—Ä—É–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ, –≤–æ–Ω—å —Å—Ç–æ—è–ª–∞, –ø—Ä–æ—Å—Ç–æ –ø–∏–∑–¥–µ—Ü. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –≥–æ–≤–æ—Ä–∏–ª, —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª –≤ —Å–≤–æ–µ–π –º–∞—à–∏–Ω–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∑–¥–∞ –∏ –ø—Ä–æ—Å–∏–ª –æ—Ç–≤–µ–∑—Ç–∏ –∫ –º–µ—Å—Ç—É –≥–¥–µ –æ–≥–æ–Ω—å –∏–∑–≤–µ—Ä–≥–Ω—É–ª—Å—è –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å, —á—Ç–æ –±—ã –∑–∞–±—Ä–∞—Ç—å –∏—Ö. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç/—Å –Ω–∞ –µ–≥–æ –∏–º—è –≤ –±–∞–∑–µ –Ω–µ –±—ã–ª–æ.', inline=False)
	emb.add_field(name=u'–°–ú–ï–†–¢–¨', value=u'Merle Abrahams —Å–∫–æ–Ω—á–∞–ª—Å—è –≤ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π —Ç—é—Ä—å–º–µ –≤ –¥–µ–∫–∞–±—Ä–µ 2004, —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ —Å–º–µ—Ä–∏ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω—ã.', inline=False)
	emb.set_image(url=f'{FILES_URL[0]}888153234353586196{FILES_URL[1]}21.09.16_-_20.37.16.12.png')
	emb.set_footer(text='FEDERAL INVESTIGATION BUREAU DATABASE')
	await ctx.channel.send('–ø—Ä–æ–∏–∑–≤–æ–∂—É –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ Merle Abrahams –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
	await ctx.channel.send(ICON[-1])
	time.sleep(8)
	await ctx.channel.purge(limit=1)
	await ctx.send(embed=emb)


@client.command(aliases=['market'])
async def stock(ctx, company, per='W'):
	try:
		await ctx.channel.purge(limit=1)
		company = company.upper()
		long_ = {'W': 604800, 'M': 2592000}
		url = 'http://api.bcs.ru/udfdatafeed/v1/history'
		params = {
		    'symbol': company,
		    'resolution': 'W',
		    'from': '{:.0f}'.format(time.time() - long_[per]*16),
		    'to': '{:.0f}'.format(time.time())
		}
		response = json.loads(requests.get(url, params=params).text)
		prices = [int(price) for price in response['h'][-12:]] if per == 'W' else []
		names = [time.strftime("%b", time.localtime(day)) for day in response['t'][-12:]] if per == 'W' else []
		if per == 'M':
			while len(names) < 12:
				for i, day in enumerate(response['t'][::-1]):
					if time.strftime("%b", time.localtime(day)) not in names:
						names.append(time.strftime("%b", time.localtime(day)))
						prices.append(response['h'][~i])
			names = names[::-1]
			prices = prices[::-1]
		arrow = {prices[-1] > prices[-2]: 'ü°≠', prices[-1] < prices[-2]: 'ü°Æ'}
		title = f'{LABEL["RAIN"][3]} {company} {prices[-1]}{arrow[True]}\n{LABEL["RAIN"][4]} stock prices for last 12 {"months" if per == "M" else "weeks"}:\n\n'
		await ctx.channel.send(describe(prices, title, names[:12]))
	except Exception as e:
		traceback = sys.exc_info()[2]
		await logit('ERROR_', client, e=e)
		raise e.with_traceback(traceback)

@client.command()
@commands.has_permissions(administrator=True)
async def setup(ctx, flag=None):
	await ctx.channel.purge(limit=1)
	match flag:
		case '!':
			await ctx.channel.send(CODE, ''.join([f'{x}: {y}\n' for x, y in os.environ.items()], CODE))
			time.sleep(3)
			await ctx.channel.purge(limit=1)
		case None:
			await ctx.channel.send(f'today {random.choice(LABEL["RUNES"])}')
			await today(ctx)
			await ctx.channel.send('‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ')
			time.sleep(1)
			await ctx.channel.send(f'moonday {random.choice(LABEL["RAIN"])}')
			await moonday(ctx, True)
			await ctx.channel.send('‚ñî ‚ñî ‚ñî ‚ñî ‚ñî ‚ñî ‚ñî ‚ñî ‚ñî ‚ñî')
			time.sleep(1)
			await ctx.channel.send(f'weather {random.choice(LABEL["RAIN"])}')
			await weather(ctx, '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')
			await ctx.channel.send('‚ñî ‚ñî ‚ñî ‚ñî ‚ñî ‚ñî ‚ñî ‚ñî ‚ñî ‚ñî')
		case _:
			pass



#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñí‚ñí   ‚ñí‚ñí ‚ñí‚ñí   ‚ñí‚ñí    ‚ñí‚ñí    ‚ñí‚ñí   ‚ñí‚ñí
#‚ñí‚ñí   ‚ñí‚ñí ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí    ‚ñí‚ñí    ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí
#‚ñì‚ñì   ‚ñì‚ñì ‚ñì‚ñì   ‚ñì‚ñì    ‚ñì‚ñì    ‚ñì‚ñì   ‚ñì‚ñì
#‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà   ‚ñà‚ñà


@client.command()
@commands.has_permissions(administrator=True)
async def data(ctx, action=None, *command):
	await ctx.channel.purge(limit=1)
	try:
		with psycopg2.connect(DATABASE_URL, sslmode='require') as database:
			action = action if not action else action.upper()
			command = command if not command else ' '.join(command)
			cursor = database.cursor()
			match action:
				case 'SELECT':
					cursor.execute("SELECT {};".format(command))
					description = [description[0] for description in cursor.description]
					records = cursor.fetchall()
					await ctx.send(formater(records, random.choice(LABEL["RAIN"]), description))
				case 'PRINT':
					cursor.execute("SELECT month, {} FROM means ORDER BY register DESC LIMIT 12;".format(command))
					records = cursor.fetchall()
					names = [column[0] for column in records[::-1]]
					values = [value[1] for value in records[::-1]]
					title = f'fix\n{random.choice(LABEL["RAIN"])}\n  {command.upper()} CHART\n\n'
					await ctx.channel.send(describe(values, title, names))
				case 'HELP':
					await ctx.channel.send(HELPSQL)
				case None:
					cursor.execute("SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'public' ORDER BY table_name;")
					description = [description[0] for description in cursor.description]
					records = cursor.fetchall()
					await ctx.channel.send(formater(records, random.choice(LABEL['CONTR']), description))
				case _:
					cursor.execute(f"{action} {command};")
					await logit('ACTION', client, action=action, command=command)
					await ctx.channel.send('{} ok'.format(ICON[random.choice((4, 7, -1))]))
	except Exception as e:
		await logit('DAFUCK', client, action=action, command=command, e=e)
		trace = sys.exc_info(e)[2]
		raise e.with_traceback(trace)


@client.command(aliases = ['pw'])
@commands.has_permissions(administrator=True)
async def password(ctx, action=None, *package):
	await ctx.channel.purge(limit=1)
	try:
		with psycopg2.connect(DATABASE_URL, sslmode='require') as database:
			action = action if not action else action.upper()
			cursor = database.cursor()
			match action:
				case 'SEE':
					cursor.execute("SELECT signature FROM repository WHERE place = '{}';".format(package[0]))
					sign = cursor.fetchone()
					decoded = decoder(sign[0], package[1])
					await ctx.channel.send('`üîè password:`  ||{}||'.format(decoded))
					message = ctx.channel.last_message
					if decoded not in message.content:
						await ctx.channel.purge(limit=5)
					else:
						await message.delete(delay=3.0)
				case 'ADD':
					cursor.execute("INSERT INTO repository (place, signature) \
									VALUES ('{}', '{}');".format(package[0], crypter(random, package[1], package[2])))
					await ctx.channel.send('{} ok'.format(ICON[random.choice((4, 7, -1))]))
				case 'UPD':
					cursor.execute("UPDATE repository SET signature = '{}' \
									WHERE place = '{}';".format(crypter(random, package[1], package[2]), package[0]))
					await ctx.channel.send('{} ok'.format(ICON[random.choice((4, 7, -1))]))
				case 'GEN':
					generated = generator(random, package[0]) if package else generator(random)
					await ctx.channel.send('`üîè generated:` ||{}||'.format(generated))
				case None:
					cursor.execute('SELECT place, signature FROM repository;')
					description = [description[0] for description in cursor.description]
					records = cursor.fetchall()
					await ctx.channel.send(formater(records, LABEL['CONTR'][14], description))
	except Exception as e:
		await logit('ERROR_', client, e=e)


#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñí‚ñí      ‚ñí‚ñí   ‚ñí‚ñí ‚ñí‚ñí   ‚ñí‚ñí ‚ñí‚ñí    ‚ñí‚ñí ‚ñí‚ñí   ‚ñí‚ñí
#‚ñí‚ñí‚ñí‚ñí‚ñí   ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  ‚ñí‚ñí    ‚ñí‚ñí ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí
#‚ñì‚ñì      ‚ñì‚ñì   ‚ñì‚ñì ‚ñì‚ñì   ‚ñì‚ñì ‚ñì‚ñì    ‚ñì‚ñì ‚ñì‚ñì   ‚ñì‚ñì
#‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà


@client.event
async def on_command_error(ctx, error):
	if isinstance(error, commands.CommandNotFound):
		wrong_command = ctx.message.content.split(' ')[0]
		await ctx.send(f'{ctx.author.name}, —ç—Ç–æ {wrong_command} —á—Ç–æ –∑–∞ —Ö—É–π–Ω—è{ICON[0]}Ôπñ')
		message = ctx.channel.last_message	
		time.sleep(2)
		await ctx.send(f'–Ω–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã')
		await message.edit(content=f'{ctx.author.name}, —ç—Ç–æ ~~{wrong_command}~~ —á—Ç–æ –∑–∞ —Ö—É–π–Ω—è{ICON[0]}Ôπñ')
	if isinstance(error, commands.MissingPermissions):
		await ctx.send(f'{ctx.author.name}, —Ö—É—è —Ä–∞–∑–æ–≥–Ω–∞–ª—Å—è, –Ω–µ —É–∫–∞–∑—ã–≤–∞–π –º–Ω–µ —á—Ç–æ –¥–µ–ª–∞—Ç—å!')


@clear.error
async def clear_error(ctx, error):
	if isinstance(error, commands.MissingRequiredArgument):
		await ctx.send(f'{ctx.author.name}, —Å–∫–æ–ª—å–∫–æ —É–¥–∞–ª—è—Ç—å? –≤ —à—Ç—É—É–∫–∞—Ö')


#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë      ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñí‚ñí   ‚ñí‚ñí ‚ñí‚ñí    ‚ñí‚ñí ‚ñí‚ñí      ‚ñí‚ñí
#‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí  ‚ñí‚ñí    ‚ñí‚ñí ‚ñí‚ñí      ‚ñí‚ñí‚ñí‚ñí‚ñí
#‚ñì‚ñì   ‚ñì‚ñì ‚ñì‚ñì    ‚ñì‚ñì ‚ñì‚ñì      ‚ñì‚ñì
#‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà


@client.event
async def on_raw_reaction_add(payload):
	if payload.message_id == POST_ID:
		channel = client.get_channel(payload.channel_id)
		message = await channel.fetch_message(payload.message_id)
		member = discord.utils.get(message.guild.members, id=payload.user_id)
		try:
			ICON = str(payload.ICON)
			role = discord.utils.get(message.guild.roles, id=ROLES[ICON])
			if len([i for i in member.roles if i.id not in EXCROLES]) <= MAX_ROLES_PER_USER:
				await member.add_roles(role)
			else:
				await message.remove_reaction(payload.ICON, member)
		except Exception as e:
			await logit('ERROR_', client, member=member, e=e)


@client.event
async def on_raw_reaction_remove(payload):
	channel = client.get_channel(payload.channel_id)
	message = await channel.fetch_message(payload.message_id)
	member = discord.utils.get(message.guild.members, id=payload.user_id)
	try:
		ICON = str(payload.ICON)
		role = discord.utils.get(message.guild.roles, id=ROLES[ICON])
		await member.remove_roles(role)
	except Exception as e:
		await logit('ERROR_', client, member=member, e=e)

client.run(TOKEN)
